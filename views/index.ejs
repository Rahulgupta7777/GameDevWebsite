<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Game Development</title>
    <link rel="stylesheet" href="./styles.css" />
  </head>
  <body style="font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; text-align: center;">
    <%- include('./utils/navbar') %>
    <% if ( message) { %>
      <div class="<%= (type == 'danger')? 'alert-danger' : 'alert-success' %>"><%=  message %></div>
    <% } %>
    <div class="mainbody">
      <div class="video-background">
        <div class="overlay"></div>
        <video autoplay muted loop id="myVideo">
          <source
            src="Assets/Mario.mp4"
            width="100px"
            height="100px"
            type="video/mp4"
          />
          Your browser does not support the video tag.
        </video>
      </div>
      <div class="content">
        <h1 class="welcome-text">Welcome to Hyperlume</h1>
      </div>

      <!-- Add team submission section -->
      </div>

      <div class="button-container">
        <a href="/register" class="register-btn">Register Now</a>
    </div>
      <!-- Add team submission section -->

      <section class="special-guest">
        <div class="container">
          <div class="guest-card">
            <div class="guest-image">
              <img
                src="Assets/nikhil.jpeg"
                alt="Nikhil Malankar - Special Guest"
              />
            </div>
            <div class="guest-info">
              <h3>Nikhil Malankar</h3>
              <p class="guest-title">CEO & Founder of GameEon Studios</p>
              <p class="guest-description">
                Nikhil Malankar is an Indian entrepreneur, game developer, and
                content creator. He is the Founder and CEO of GameEon Studios, a
                Mumbai-based game development company. Under his leadership,
                GameEon Studios is developing "Mumbai Gullies," an ambitious
                open-world game set in the city of Mumbai.
              </p>
            </div>
          </div>
        </div>
      </section>

      <section id="game-theme">
        <div class="game-theme-card">
          <div class="game-theme-info">
            <h1>Game Development Theme</h1>
            <h2>OUT OF CONTROL</h2>
          </div>
        </div>
      </section>

      <!-- Add this after the special-guest section -->
      <section class="leaderboard-section">
        <div class="container">
          <div class="leaderboard-card">
            <h2>Top 10 Leaderboard</h2>
            <div class="leaderboard-table">
              <div class="leaderboard-header">
                <span class="rank">Rank</span>
                <span class="team">Team Name</span>
                <span class="score">Game</span>
              </div>
              <!-- Gold - 1st Place -->
              <div class="leaderboard-row gold">
                <span class="rank">#1</span>
                <span class="team">Uncontrollables</span>
                <span class="score"><a href="https://kritgarg.itch.io/never-landing" style="text-decoration: none;color: gold;">Play</a></span>
              </div>
              <!-- Silver - 2nd Place -->
              <div class="leaderboard-row silver">
                <span class="rank">#2</span>
                <span class="team">Petrosapiens</span>
                <span class="score"><a href="https://ayushsingh9.itch.io/rolling-fortune" style="text-decoration: none;color: silver;">Play</a></span>
              </div>
              <!-- Bronze - 3rd Place -->
              <div class="leaderboard-row bronze">
                <span class="rank">#3</span>
                <span class="team">Tesseract</span>
                <span class="score"><a href="https://curiouscoder.itch.io/drift-run" style="text-decoration: none;color: orange">Play</a></span>
              </div>
              <!-- Regular rows -->
              <div class="leaderboard-row">
                <span class="rank">#4</span>
                <span class="team">Sms</span>
                <span class="score"><a href="https://deepesh22.itch.io/2d-endless-game1" style="text-decoration: none;color: whitesmoke;">Play</a></span>
              </div>
              <div class="leaderboard-row">
                <span class="rank">#5</span>
                <span class="team">Three Virtues</span>
                <span class="score"><a href="https://dsprocoder.itch.io/delivery-driver" style="text-decoration: none;color: whitesmoke;">Play</a></span>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Add this after the leaderboard section -->
      <section class="minigame-section">
        <div class="container">
          <h2 style="color: #ffd700; text-shadow: 0 0 10px #ffd700">
            Space Shooter
          </h2>
          <div class="game-stats">
            <div>Score: <span id="score">0</span></div>
            <div>High Score: <span id="highScore">0</span></div>
          </div>
          <div class="game-container" id="gameContainer">
            <div class="spaceship" id="spaceship"></div>
            <div class="game-over" id="gameOver">
              Game Over!<br />
              <span id="finalScore"></span><br />
              <button class="start-button" onclick="startGame()">
                Play Again
              </button>
            </div>
          </div>
          <button class="start-button" onclick="startGame()">Start Game</button>
        </div>
      </section>
    </div>

    <!-- Add the modal forms after the mainbody div -->
    <div class="modal" id="loginModal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Login</h2>
         id="loginForm">
          <div class="form-group">
            <label for="loginEmail">Email</label>
            <input type="email" id="loginEmail" required />
          </div>
          <div class="form-group">
            <label for="loginPassword">Password</label>
            <input type="password" id="loginPassword" required />
          </div>
          <button type="submit" class="btn submit-btn">Login</button>
        </form>
      </div>
    </div>

    <div class="modal" id="registerModal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="registerName">Full Name</label>
            <input type="text" id="registerName" required />
          </div>
          <div class="form-group">
            <label for="registerEmail">Email</label>
            <input type="email" id="registerEmail" required />
          </div>
          <div class="form-group">
            <label for="registerPassword">Password</label>
            <input type="password" id="registerPassword" required />
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" required />
          </div>
          <button type="submit" class="btn submit-btn">Register</button>
        </form>
      </div>
    </div>

    <audio id="bgMusic" loop>
      <source src="Assets/AdhesiveWombat.mp3" type="audio/mp3" />
      Your browser does not support the audio element.
    </audio>

    <audio id="keyboardSound">
      <source src="Assets/mech-keyboard.mp3" type="audio/mp3" />
    </audio>

    <audio id="background-music" loop>
      <source src="path/to/background-music.mp3" type="audio/mpeg" />
      Your browser does not support the audio element.
    </audio>

    <audio id="laser-sound">
      <source src="path/to/laser-sound.mp3" type="audio/mpeg" />
      Your browser does not support the audio element.
    </audio>

    <audio id="explosion-sound">
      <source src="path/to/explosion-sound.mp3" type="audio/mpeg" />
      Your browser does not support the audio element.
    </audio>

    <div class="audio-controls">
      <button id="musicToggle" onclick="toggleMusic()">
        <img src="Assets/Music.png" alt="Toggle Music" />
      </button>
    </div>

    <script src="script.js"></script>
    <script>
      const bgMusic = document.getElementById("bgMusic");
      const musicToggle = document.getElementById("musicToggle");
      let isMusicPlaying = false;

      // Function to toggle music
      function toggleMusic() {
        if (isMusicPlaying) {
          bgMusic.pause();
          musicToggle.classList.remove("active");
        } else {
          bgMusic.play();
          musicToggle.classList.add("active");
        }
        isMusicPlaying = !isMusicPlaying;
      }

      // Add event listener for when the page loads
      document.addEventListener("DOMContentLoaded", function () {
        // Start music muted by default
        bgMusic.volume = 0.2; // Set volume to 20% instead of 50%
      });

      // Handle user interaction to start playing
      document.addEventListener(
        "click",
        function () {
          if (!isMusicPlaying) {
            bgMusic.play().catch(function (error) {
              console.log("Audio play failed:", error);
            });
            isMusicPlaying = true;
            musicToggle.classList.add("active");
          }
        },
        { once: true }
      );

      let gameActive = false;
      let score = 0;
      let highScore = 0;
      let spaceshipPos = 50;
      const gameContainer = document.getElementById("gameContainer");
      const spaceship = document.getElementById("spaceship");
      const scoreElement = document.getElementById("score");
      const highScoreElement = document.getElementById("highScore");
      const gameOver = document.getElementById("gameOver");
      const finalScore = document.getElementById("finalScore");

      function startGame() {
        if (gameActive) return;
        gameActive = true;
        score = 0;
        scoreElement.textContent = score;
        gameOver.style.display = "none";
        spawnEnemies();
      }

      function moveSpaceship(e) {
        if (!gameActive) return;

        // Only play sound if position actually changed
        const oldPos = spaceshipPos;
        const containerRect = gameContainer.getBoundingClientRect();
        const x = e.clientX - containerRect.left;
        spaceshipPos = (x / containerRect.width) * 100;
        spaceshipPos = Math.max(5, Math.min(95, spaceshipPos));

        spaceship.style.left = spaceshipPos + "%";
      }

      function shoot(e) {
        if (!gameActive) return;

        // Play keyboard sound
        keyboardSound.currentTime = 0; // Reset sound to start
        keyboardSound.play();

        const laser = document.createElement("div");
        laser.className = "laser";
        laser.style.left = spaceshipPos + "%";
        laser.style.bottom = "60px";
        gameContainer.appendChild(laser);

        const laserInterval = setInterval(() => {
          const laserRect = laser.getBoundingClientRect();
          const enemies = document.getElementsByClassName("enemy");

          Array.from(enemies).forEach((enemy) => {
            const enemyRect = enemy.getBoundingClientRect();
            if (isColliding(laserRect, enemyRect)) {
              enemy.remove();
              laser.remove();
              clearInterval(laserInterval);
              score += 10;
              updateScore(score);
            }
          });

          if (parseInt(laser.style.bottom) > gameContainer.offsetHeight) {
            laser.remove();
            clearInterval(laserInterval);
          } else {
            laser.style.bottom = parseInt(laser.style.bottom) + 5 + "px";
          }
        }, 16);
      }

      function spawnEnemies() {
        if (!gameActive) return;

        const enemy = document.createElement("div");
        enemy.className = "enemy";
        enemy.style.left =
          Math.random() * (gameContainer.offsetWidth - 30) + "px";
        enemy.style.top = "-30px";
        gameContainer.appendChild(enemy);

        let enemyPos = -30;
        const enemyInterval = setInterval(() => {
          if (!gameActive) {
            clearInterval(enemyInterval);
            return;
          }

          enemyPos += 2;
          enemy.style.top = enemyPos + "px";

          // Check for collision with spaceship
          const enemyRect = enemy.getBoundingClientRect();
          const spaceshipRect = spaceship.getBoundingClientRect();

          if (isColliding(enemyRect, spaceshipRect)) {
            enemy.remove();
            clearInterval(enemyInterval);
            endGame();
            return;
          }

          // Remove enemy when it's off screen but don't end game
          if (enemyPos > gameContainer.offsetHeight) {
            enemy.remove();
            clearInterval(enemyInterval);
          }
        }, 16);

        // Spawn next enemy
        setTimeout(() => {
          if (gameActive) spawnEnemies();
        }, 1000);
      }

      function isColliding(rect1, rect2) {
        return !(
          rect1.right < rect2.left ||
          rect1.left > rect2.right ||
          rect1.bottom < rect2.top ||
          rect1.top > rect2.bottom
        );
      }

      function endGame() {
        gameActive = false;
        if (score > highScore) {
          highScore = score;
          highScoreElement.textContent = highScore;
        }
        finalScore.textContent = `Final Score: ${score}`;
        gameOver.style.display = "block";
        const enemies = document.getElementsByClassName("enemy");
        while (enemies.length > 0) {
          enemies[0].remove();
        }
      }

      gameContainer.addEventListener("mousemove", moveSpaceship);
      gameContainer.addEventListener("click", shoot);

      // Score animation
      function updateScore(newScore) {
        const scoreElement = document.getElementById("score");
        scoreElement.style.animation = "scorePopup 0.3s ease";
        scoreElement.textContent = newScore;
        scoreElement.addEventListener("animationend", () => {
          scoreElement.style.animation = "";
        });
      }

      // Add intersection observer for animations
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.style.visibility = "visible";
              entry.target.style.animation = entry.target.dataset.animation;
            }
          });
        },
        { threshold: 0.1 }
      );

      // Observe elements
      document
        .querySelectorAll(".leaderboard-card, .guest-card, .submission-form")
        .forEach((el) => observer.observe(el));
    </script>
    <script src="mouseTrail.js"></script>

    <!-- Add footer before closing body tag -->
    <footer
      style="
        text-align: center;
        padding: 20px;
        color: #ffd700;
        position: relative;
        z-index: 2;
      "
    >
      <p
        class="footer-text"
        style="
          font-size: 1.2em;
          text-shadow: 0 0 10px #ffd700;
          animation: footerGlow 2s ease-in-out infinite alternate;
          transition: transform 0.3s ease;
          cursor: pointer;
          display: inline-block;
        "
      >
      <p>
        <span style="
          background: linear-gradient(90deg, #ffd700, #ff1493);
          background-clip: text;
          -webkit-background-clip: text; /* For WebKit browsers */
          -webkit-text-fill-color: transparent;
          color: transparent; /* Standard fallback */
          font-weight: bold;
          display: inline-block;
        ">
          Game Development Community
        </span>
      </p>
      
      
    </footer>
  </body>
</html>
